/*
 *  Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 *  This file (farmModel.js) is part of LiteFarm.
 *
 *  LiteFarm is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  LiteFarm is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details, see <https://www.gnu.org/licenses/>.
 */

import { Model } from 'objection';
import baseModel from './baseModel.js';

class Nomination extends baseModel {
  static get tableName() {
    return 'nomination';
  }

  static get idColumn() {
    return 'nomination_id';
  }

  // Optional JSON schema. This is not the database schema! Nothing is generated
  // based on this. This is only used for validation. Whenever a model instance
  // is created it is checked against this schema. http://json-schema.org/.
  static get jsonSchema() {
    return {
      type: 'object',
      required: ['farm_id', 'nominated_id', 'nomination_type'],
      properties: {
        nomination_id: { type: 'integer' },
        farm_id: { type: 'string' },
        nominated_id: { type: 'string' },
        nomination_type: { type: 'string' },
        ...this.baseProperties,
      },
      additionalProperties: false,
    };
  }

  static get relationMappings() {
    return {
        nomination_type: {
            relation: Model.BelongsToOneRelation,
            modelClass: nominationStatusModel,
            join: {
                from: 'nomination.nomination_type',
                to: 'nomination_type.name',
            },
        },
        nomination_status: {
            relation: Model.HasManyRelation,
            modelClass: nominationStatusModel,
            join: {
                from: 'nomination.nomination_id',
                to: 'nomination_status.nomination_id',
            },
        },
    };
  }

  static async updateIrrigationType(irrigationTypeValues) {
    const { user_id, irrigation_type_id, ...rest } = irrigationTypeValues;
    return await IrrigationTypesModel.query()
      .context({ user_id })
      .findById(irrigation_type_id)
      .patch({ ...rest });
  }

  static async createNomination(row) {
    const { user_id, ...rest } = irrigationTypeValues;
    return await Nomination.query()
      .context({ user_id })
      .insert({ ...rest });
  }

  static async getNominationsByNominationType(nominationType) {
    return Nomination.query()
        .where('nomination_type', nominationType)
  }

  static async getNominationsByFarmId(farmId) {
    return Nomination.query()
        .where('nomination_type', nominationType)
  }

  static async getNominationsByUserId(userId) {

  }

  static async getAllStatusByNominationId(nominationId) {

  }

  static async getRecentStatusByNominationId(nominationId) {

  }


  /**
   * Returns a farm and country object by farm id.
   * @param {uuid} farmId
   * @static
   * @async
   * @return {Promise<*>}
   */
  static async getFarmById(farmId) {
    return Farm.query()
      .join('countries', 'farm.country_id', 'countries.id')
      .select(['farm.*', 'countries.*'])
      .where('farm_id', farmId)
      .first();
  }
}

export default Nomination;
